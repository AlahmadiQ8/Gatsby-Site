webpackJsonp([0x7a7d5ece10d5],{322:function(n,s){n.exports={data:{markdownRemark:{html:'<p>this is an excerp</p>\n<h2 id="introduction"><a href="#introduction" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>\n<p>I mostly use Mocha testing framework with Chaijs assertion library.\nLately, I\'ve seen a lot of open source projects using Jest testing platform.\nI never thought about it since I\'ve never had a problem with my current testing stack - Not untill I was trying to test time sensitive logic.</p>\n<p>To solve this, I would use <a href="http://sinonjs.org/">Sinon</a> where I would use <a href="http://sinonjs.org/releases/v2.2.0/fake-timers/">fake timers</a>. However, I\'d have to a third dependancy to my unit testing stack in addition to Mocha and chaijs. That means more configuration overhead.</p>\n<p><a href="http://facebook.github.io/jest/">Jest</a> claims to be a <em>zero configuration</em> testing platform. It comes with its own assertion and mock libraries. I immediately fell in love with how easy and fast I get going with testing.</p>\n<p>Jest provides its own fake timers and below, I describe how to use them to test time sensitive logic.</p>\n<h2 id="problem"><a href="#problem" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Problem</h2>\n<p>Let\'s say you have the following function that calls callback function x times every 1 second. How would we test it?</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">everySecond</span> <span class="token operator">=</span> <span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">===</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">everySecond</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2 id="discussion"><a href="#discussion" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Discussion</h2>\n<p>Let\'s first define our tests below:</p>\n<ul>\n<li>Should invoke callback once after 1 second.</li>\n<li>Should invoke callback three times after 3 seconds.</li>\n<li>Should invoke callback a maximum of 5 times give <code>to=5</code> as time goes to infinity.</li>\n</ul>\n<h2 id="solution"><a href="#solution" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Solution</h2>\n<p><em>Don\'t forget to checkout <a href="https://facebook.github.io/jest/docs/en/timer-mocks.html#content">the docs</a> on timer mocks.</em></p>\n<p> here is how we\'d write our tests:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>jest<span class="token punctuation">.</span><span class="token function">useFakeTimers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">\'Call callback 5 times every 1 second\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">const</span> callback <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">everySecond</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  jest<span class="token punctuation">.</span><span class="token function">runTimersToTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// after 1 second</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  jest<span class="token punctuation">.</span><span class="token function">runTimersToTime</span><span class="token punctuation">(</span><span class="token number">2999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// after 3 seconds</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  jest<span class="token punctuation">.</span><span class="token function">runTimersToTime</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// after infinity</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>calls<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>',excerpt:"this is an excerp Introduction I mostly use Mocha testing framework with Chaijs assertion library.\nLately, I've seen a lot of open source projects using Jest testing platform.\nI never thought about it since I've never had a problem with my current testing stack - Not untill I was trying to test time sensitive logic. To solve this, I would use  Sinon  where I would use  fake timers . However, I'd have to a third dependancy to my unit testing stack in addition to Mocha and chaijs. That means more…",frontmatter:{title:"Testing Time Sensitive Operations with Jest Timer Mocks"},fields:{date:"May 13, 2017",slug:"/blog/2017/05/13/testing-with-timer-mocks"}}},pathContext:{slug:"/blog/2017/05/13/testing-with-timer-mocks"}}}});
//# sourceMappingURL=path---blog-2017-05-13-testing-with-timer-mocks-7b47d9b2530562e728eb.js.map